import { MyContext } from '../../types';
import { InlineKeyboardMarkup } from 'telegraf/typings/core/types/typegram';

export class DocumentService {
  static async sendDocumentWithMessage(
    ctx: MyContext,
    messageText: string,
    documentPath: string,
    finalText: boolean = true,
    startText: boolean = true
  ) {
    try {
      if (startText && messageText) {
        await ctx.reply(messageText);
      }

      await ctx.reply(`üìÑ –î–æ–∫—É–º–µ–Ω—Ç: ${documentPath.split('/').pop()}`);

      if (finalText) {
        await ctx.reply('–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /home', { parse_mode: 'HTML' });
      }
    } catch (error) {
      console.error('Error sending document:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞');
    }
  }

  static async sendVideoLink(
    ctx: MyContext,
    title: string,
    videoUrl: string,
    backButton: boolean = false,
    finalText: boolean = true
  ) {
    try {
      const keyboard: InlineKeyboardMarkup = {
        inline_keyboard: [
          [{ text: '–°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ', url: videoUrl }]
        ]
      };

      await ctx.reply(
        `<b>${title}</b>\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:`,
        {
          reply_markup: keyboard,
          parse_mode: 'HTML'
        }
      );

      if (finalText) {
        await ctx.reply('–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /home', { parse_mode: 'HTML' });
      }

      if (backButton) {
        await ctx.reply('–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /back');
      }
    } catch (error) {
      console.error('Error sending video link:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ');
    }
  }
}